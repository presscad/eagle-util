/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "swig_test_core.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1min_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min_lat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1min_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (double) ((arg1)->min_lat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1max_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_lat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1max_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (double) ((arg1)->max_lat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1min_1lng_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min_lng = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1min_1lng_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (double) ((arg1)->min_lng);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1max_1lng_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_lng = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1max_1lng_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (double) ((arg1)->max_lng);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1time_1point_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->time_point_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1time_1point_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (int) ((arg1)->time_point_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1passenger_1state_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->passenger_state_filter = arg2;
}


SWIGEXPORT jint JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1passenger_1state_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (int) ((arg1)->passenger_state_filter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1fcd_1gps_1order_1by_1devid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fcd_gps_order_by_devid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCoreParams_1fcd_1gps_1order_1by_1devid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCoreParams **)&jarg1; 
  result = (bool) ((arg1)->fcd_gps_order_by_devid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_new_1SwigCoreParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCoreParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCoreParams *)new SwigCoreParams();
  *(SwigCoreParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_delete_1SwigCoreParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCoreParams *arg1 = (SwigCoreParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigCoreParams **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_new_1SwigCorePoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCorePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCorePoint *)new SwigCorePoint();
  *(SwigCorePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_delete_1SwigCorePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigCorePoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1SetMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4, jfloat jarg5, jlong jarg6, jshort jarg7, jshort jarg8) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  float arg5 ;
  std::string *arg6 = 0 ;
  short arg7 ;
  unsigned char arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(std::string **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg7 = (short)jarg7; 
  arg8 = (unsigned char)jarg8; 
  (arg1)->SetMembers((std::string const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1dev_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dev_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1dev_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result =  ((arg1)->dev_id);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result = (double) ((arg1)->lat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1lng_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lng = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1lng_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result = (double) ((arg1)->lng);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result = (float) ((arg1)->speed);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1gps_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->gps_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1gps_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result =  ((arg1)->gps_time);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1heading_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1heading_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result = (short) ((arg1)->heading);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1passenger_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->passenger_state = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePoint_1passenger_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  SwigCorePoint *arg1 = (SwigCorePoint *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePoint **)&jarg1; 
  result = (unsigned char) ((arg1)->passenger_state);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_new_1SwigCorePointVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCorePointVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCorePointVector *)new SwigCorePointVector();
  *(SwigCorePointVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_delete_1SwigCorePointVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  result = (bool)((SwigCorePointVector const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  result = (int)((SwigCorePointVector const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  SwigCorePoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  arg2 = *(SwigCorePoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCorePoint const & reference is null");
    return ;
  } 
  (arg1)->add((SwigCorePoint const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  int arg2 ;
  SwigCorePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SwigCorePoint *) &((SwigCorePointVector const *)arg1)->get(arg2);
  *(SwigCorePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_SwigCorePointVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigCorePointVector *arg1 = (SwigCorePointVector *) 0 ;
  std::vector< SwigCorePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigCorePointVector **)&jarg1; 
  result = (std::vector< SwigCorePoint > *) &((SwigCorePointVector const *)arg1)->data();
  *(std::vector< SwigCorePoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_new_1SwigTestCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigTestCore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigTestCore *)new SwigTestCore();
  *(SwigTestCore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_delete_1SwigTestCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigTestCore *arg1 = (SwigTestCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigTestCore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_example_swigtest_swig_1testJNI_SwigTestCore_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  SwigTestCore *arg1 = (SwigTestCore *) 0 ;
  SwigCoreParams *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigTestCore **)&jarg1; 
  arg2 = *(SwigCoreParams **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCoreParams const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg4 = *(std::string **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg5 = *(std::string **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Init((SwigCoreParams const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_swigtest_swig_1testJNI_SwigTestCore_1OnFcdData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SwigTestCore *arg1 = (SwigTestCore *) 0 ;
  SwigCorePointVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigTestCore **)&jarg1; 
  arg2 = *(SwigCorePointVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCorePointVector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnFcdData((SwigCorePointVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_swigtest_swig_1testJNI_SwigTestCore_1GetErrorStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigTestCore *arg1 = (SwigTestCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigTestCore **)&jarg1; 
  result = ((SwigTestCore const *)arg1)->GetErrorStr();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_swigtest_swig_1testJNI_SwigTestCore_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigTestCore *arg1 = (SwigTestCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigTestCore **)&jarg1; 
  (arg1)->Reset();
}


#ifdef __cplusplus
}
#endif

